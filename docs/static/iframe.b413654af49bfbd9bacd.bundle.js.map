{"version":3,"file":"static/iframe.b413654af49bfbd9bacd.bundle.js","sources":["webpack:///./src/components/Link/Link.js"],"sourcesContent":["import React from 'react'\r\nimport { Link as GatsbyLink } from 'gatsby'\r\nimport scrollIntoView from 'smooth-scroll-into-view-if-needed'\r\n\r\nconst onInternalClick = ({ smoothScroll }, e) => {\r\n    if (smoothScroll) {\r\n        e.preventDefault()\r\n        const target = e.currentTarget.hash.split('#')[1]\r\n        const targetNode = document.getElementById(target)\r\n        if (targetNode) {\r\n            scrollIntoView(targetNode, {\r\n                scrollMode: 'always',\r\n                block: 'start',\r\n                inline: 'start',\r\n                behaviour: 'smooth',\r\n            }).then(() => {\r\n                window.location.hash = target\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst Link = props => {\r\n    // Since DOM elements <a> cannot receive activeClassName,\r\n    // destructure the prop here and pass it only to GatsbyLink\r\n    const {\r\n        activeClassName,\r\n        children,\r\n        to,\r\n        smoothScroll = false,\r\n        ...other\r\n    } = props\r\n\r\n    // Assumes that any internal link (intended for Gatsby)\r\n    // will start with exactly one slash, and that anything else is external.\r\n    const internal = /^\\/(?!\\/)/.test(to)\r\n\r\n    // Tests if path ends with a dot file extension\r\n    const file = /\\.[0-9a-z]+$/i.test(to)\r\n\r\n    // Use Gatsby Link for internal links, and <a> for others\r\n    if (internal && !file) {\r\n        const onClick = (...args) => onInternalClick({ smoothScroll }, ...args)\r\n\r\n        return (\r\n            <GatsbyLink to={ to } activeClassName={ activeClassName } onClick={ onClick } { ...other }>\r\n                { children }\r\n            </GatsbyLink>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <a href={ to } { ...other }>\r\n            { children }\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default Link\r\n"],"mappings":"AA0DA","sourceRoot":""}